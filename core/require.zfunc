#!/usr/bin/env zsh

# ==============================
# available functions
# ==============================
# return boolean:
# - require
#
# internal:
# - require._os
# - require._cmd
# - require._apt
# - require._brew
# - require._cask
# - require._snap
# ============================== 
function require() {
  local verb=$1
  case $verb in
    cmd)
      shift
      require._cmd "$@"
      ;;
    apt)
      shift
      require._apt "$@"
      ;;
    brew)
      shift
      require._brew "$@"
      ;;
    cask)
      shift
      require._cask "$@"
      ;;
    snap)
      shift
      require._snap "$@"
      ;;
    *)
      require._os "$@"
      ;;
  esac
}

function require._os() {
  local os_name=$1
  local res=0
  case $os_name in
    'macos')
      [[ $(sw_vers -productName) == "macOS" ]] && res=1
      ;;
    'ubuntu')
      [[ ${(L)$(lsb_release --id --short)} == "ubuntu" ]] && res=1
  esac
  if (( $res )); then
    return 0
  else
    log.warn "not running on ${os_name}"
    return 1
  fi
}

function require._cmd() {
  local cmd_name=$1
  if (( ${+commands[${cmd_name}]} )); then
    return 0
  else
    log.warn "cmd ${cmd_name} not found"
    return 1
  fi
}

function require._apt() {
  require cmd 'apt-get' || return 1
  apt.load
  local pkg_name=$1
  if (( ${+apts[${pkg_name}]} )); then
    return 0
  else
    log.warn "apt package ${pkg_name} not found"
    return 1
  fi
}

function require._snap() {
  require cmd 'snap' || return 1
  snap.load
  local pkg_name=$1
  if (( ${+snaps[${pkg_name}]} )); then
    return 0
  else
    log.warn "snap package ${pkg_name} not found"
    return 1
  fi
}

function require._brew() {
  require cmd 'brew' || return 1
  brew.load
  local pkg_name=$1
  if (( ${+brews[${pkg_name}]} )); then
    return 0
  else
    log.warn "brew formula ${pkg_name} not found"
    return 1
  fi
}

function require._cask() {
  require cmd 'brew' || return 1
  brew.load
  local pkg_name=$1
  if (( ${+casks[${pkg_name}]} )); then
    return 0
  else
    log.warn "brew cask ${pkg_name} not found"
    return 1
  fi
}

# vim: filetype=zsh:
